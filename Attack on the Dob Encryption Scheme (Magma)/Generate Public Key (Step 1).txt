//Creates an instance of the Dob encryotion scheme with various parameters. 
//Setup for computing a Gröbner basis with F4 (Currently commented out, see bottom of the file)
//Also a first step in the specialised attack on this scheme.

//------------------------------------------- Set Parameters ---------------------------------------------------
//Plus is the number of "plus"--perturbations
Plus := 0;

//OPlus is the number of "OPlus"-perturbations (\geq 2).
OPlus := 0;

//LPlus denotes the number of "LPlus"-perturbations
LPlus := 0;

//fix is number of variables to fix in the system (Note: set to 0 if "Attack Dob D = 4" is to be used):
fix := 0;

//a is the number of public polynomials to remove:
a := 0;

//Note that m governs the size of the system. I.e. we have n := 2*m - 1 
m := 32;

//Add random homogeneous quadratic polynomials to I
RandQ := 0;

//Add random homogeneous cubic polynomials to I
RandC := 0;

//If set to 1, we add the homogeneous q1^h...qt^h to the polynomial system
AddHomq := 0;

//If set to 1, we add v_1,...,v_k to the polynomial system
AddOPlus := 0;





//------------------------------------------ End Parameter Setting ---------------------------------------------------






p:=2;

ed:=1;

q:=p^ed;

K:=GF(p,ed);

n:=2*m - 1;

L:=ext<K|n>;




LX<X>:=PolynomialRing(L);


KX_n:=quo<PolynomialRing(K,n,"grevlex")|[$.i^(p^ed)-$.i:i in [1..n]]>;



STSpace:=GeneralLinearGroup(n,K);


AssignNames(~KX_n,["x_" cat IntegerToString(i)  : i in [1..n]]);




powerpol:=function(Koeff,exponent,n);
 
	L<g>:=ext<K|n>; 
 
	LX<X>:=PolynomialRing(L);
 

	erg:=LX!X^exponent;

 

	if Koeff eq 1 then
   
		erg:=Random(L)*erg;
 
	end if;


	return erg;

end function;




Randompol2:=function(r,n,p,linear);
 
	L<g>:=ext<K|n>;
 
	LX<X>:=PolynomialRing(L);
 
	erg:=0;
 
	for i in [0..r] do
  
		for j in [0..r] do
    
			erg:=erg+Random(L)*X^((p^ed)^i+(p^ed)^j);
    
		end for;
    
	end for;
 

	if (linear eq 1) then
   
		for i in [1..n-1] do
     
			erg:=erg+X^((p^ed)^i);
   
		end for;
 
	end if;
 

	return erg;

end function;







Uni2Multi:=function(n,p,m);
  
	L<g>:=ext<K|n>;
  
	LX<X>:=PolynomialRing(L);
  
	LX_n:=quo<PolynomialRing(L,n,"grevlex")|[$.i^(p^ed)-$.i:i in [1..n]]>;
    
	//polin:=Evaluate(pol,&+[(L.1)^(i-1)*LX_n.i:i in [1..n]]);
    
	temp := 0;
	
	for i in [1..n] do
		
		temp:= temp + (L.1)^(i-1)*LX_n.i;
	
	end for;
	
	XPow := Evaluate(X,temp);
	ExpVal := XPow;
	
	for i in [1..m] do
	
		ExpVal := ExpVal^2;
	
	end for;
	
	polin:= ExpVal*XPow + Evaluate(X^3,temp) + XPow;
	
	h1:=[Eltseq(c):c in Coefficients(polin)];
   
	h2:=Monomials(polin);
   
	LX2KX:=hom< LX_n-> KX_n | [KX_n.i : i in [1..n]] >;
   
	Erg:=[ LX2KX(&+[ h1[j,i]*h2[j] : j in [1..#h2]]) : i in [1..n]];
 
	return Erg;

end function;

//taken from Kipnis and Shamir, Attacking HFE by Relinearization. Not the fastest solution



Multi2Uni:=function(ntupel,E,Basis,p,ed)
 
	dim:=Degree(E);
 
	LX<X>:=PolynomialRing(E);
 
	LX2<Y>:=quo<LX|X^(p^(ed*dim))-X>;
 
	beta:=[LX2!0: i in [1..dim]];
 
	Spurpol:=&+[X^(p^(ed*i)): i in [0..dim-1]];
 
 
	for i in [1..dim] do
   
		print "Working on  ",i, "-th component";
   // Determine c such that Trace(c*Basis[j])=1 only for j=i and 0 else
   
		pols:=&cat [[Evaluate(Spurpol,X*Basis[i])]: i in [1..dim]];
   
		pols[i]:=pols[i]-1;
   
		I:=ideal<LX|pols>;
   // Projection on i-th component
   
		beta[i]:=Evaluate(Spurpol,Y*Coefficients(Generator(I))[1]);
 
	end for;

 
	print"Generate univariate polynomial.......";

 
	Uni:=&+[Evaluate(ntupel[i],beta)*Basis[i]: i in [1..dim]];
 
	Uni:=Evaluate(Uni,X);
 
	return Uni;

end function;



// Making an n tupel of linear polynomaials from a given matrix



Hom2Pol:=function(S)
  
	Erg:=[&+[S[j,i]*KX_n.i:i in [1..n]]: j in [1..n]];
  return Erg;

end function;

// composition of tupels of multivariate polynomials



Subst:=function(A,B)
 
	Erg:=[Evaluate(A[i],Eltseq(B)): i in [1..n]];
 
	return Erg;

end function;

// composition of SoPoT required to generate a public multivariate key.



Hide:=function(P,affin)
  
	S:=Random(STSpace);
  
	T:=Random(STSpace);
  
	SPol:=Hom2Pol(S);
  
	TPol:=Hom2Pol(T);
   
	Sinv:=S^-1;
   
	Tinv:=T^-1;
  
	SPolinv:=Hom2Pol(Sinv);
  
	TPolinv:=Hom2Pol(Tinv);
  

	if (affin eq 1) then
   
		for j in [1..n] do
   
			SPol[j]:=SPol[j]+KX_n!Random(K);
   
			TPol[j]:=TPol[j]+KX_n!Random(K);
  
		end for;
  
	end if;
  
return Subst(SPol,Subst(P,TPol)),SPol,TPol,SPolinv,TPolinv;

end function;



//---------------------------------------------------------------------------


//pol := X^(2^m + 1) + X^3 + X;

CentralMap := Hide(Uni2Multi(n,p,m),0);

//---------- Start Adding Perturbations --------------------------------------

UnModCentralMap := CentralMap;

//Plus
PlusPol := [];
for i in [1..Plus] do

		pol := 0;
		for j in [1..n] do
			for k in [j + 1..n] do
				pol := pol + Random(K)*KX_n.j*KX_n.k;
			end for;
			
			pol := pol + Random(K)*KX_n.j;
			
		end for;
	
	pol := pol + Random(K);
	
	Append(~PlusPol,pol);

end for;

for i in [1..n] do

	Add := 0;

	for j in [1..Plus] do
	
		Add := Add + Random(K)*PlusPol[j];
	
	end for;

	CentralMap[i] := CentralMap[i] + Add;

end for;


//Oplus
OPlusPol := [];
for i in [1..OPlus] do

	TempPol := Random(K);

	for j in [1..n] do
	
		TempPol := TempPol + Random(K)*KX_n.j;
	
	end for;
	
	Append(~OPlusPol,TempPol);

end for;

for i in [1..n] do

	Add := 0;

	for j in [1..OPlus] do
	
		for k in [j+1..OPlus] do
		
			Add := Add + Random(K)*OPlusPol[j]*OPlusPol[k];
		
		end for;
		
		Add := Add + Random(K)*OPlusPol[j];
	
	end for;
	
	CentralMap[i] := CentralMap[i] + Add; 

end for;


//LPlus
LPlusPol := [];
for i in [1..LPlus] do

		pol := 0;
		for j in [1..n] do

			pol := pol + Random(K)*KX_n.j;
			
		end for;
	
	pol := pol + Random(K);
	
	Append(~LPlusPol,pol);

end for;

for i in [1..n] do

	Add := 0;

	for j in [1..LPlus] do
	
		Add := Add + Random(K)*LPlusPol[j];
	
	end for;

	CentralMap[i] := CentralMap[i] + Add;

end for;



//--------------Begin: Finds a plaintext in the kernel of the oplus vectors ---------------------------

//VarVec := [KX_n.1];
//for i in [1..n-1] do
//	Append(~VarVec,KX_n.(i+1));
//end for;

//InKer := false;

//while InKer eq false do

//	XVec := [Random(K)];
//	for i in [1..n-1] do
//		Append(~XVec,Random(K));
//	end for;
	
//	InKer := true;
//	for i in [1..OPlus] do
	
//		if Evaluate(OPlusPol[i],XVec) ne 0 then
		
//			InKer := false;
//			break;
		
//		end if;
	
//	end for;
	
	
//end while;


//---------------End: Plaintext in oplus kernel -----------------------------------------------------





XVec := [Random(K)];
VarVec := [KX_n.1];
for i in [1..n-1] do
	Append(~XVec,Random(K));
	Append(~VarVec,KX_n.(i+1));
end for;

for i in [1..fix] do

	VarVec[i] := XVec[i];
	
end for;

for i in [1..n] do
	CentralMap[i] := Evaluate(CentralMap[i],VarVec);
	CentralMap[i] := CentralMap[i] + Evaluate(CentralMap[i],XVec);
end for;


R:= BooleanPolynomialRing(n, "grevlex");

AssignNames(~R,["x_" cat IntegerToString(i)  : i in [1..n]]);

XTuple := [];

for i in [1..n] do

	Append(~XTuple,R.i);

end for;

FixXTuple := XTuple;

//Casting the correct vector to use in AddHomq and AddOPlus
for i in [1..fix] do

	FixXTuple[i] := XVec[i];
	
end for;


I:= [];
for i in [1..n-a] do
	I:= I cat [Evaluate(CentralMap[i],XTuple)];
end for;	
UnModI := [];
for i in [1..n] do
	UnModI:= UnModI cat [Evaluate(UnModCentralMap[i],XTuple)];
end for;

//Adds Random quadratic to I
for i in [1..RandQ] do
	pol := 0;
		for j in [1 + fix..n] do
			for k in [j + 1..n] do
				pol := pol + Random(GF(2))*R.j*R.k;
			end for;
			
			pol := pol + Random(GF(2))*R.j;
			
		end for;
		
	I := I cat [pol];
		
end for;

//Adds Random cubic polynomials to I
for i in [1..RandC] do
	pol := 0;
		for j in [1 + fix..n] do
			for k in [j + 1..n] do
				for l in [k + 1..n] do
				
					pol := pol + Random(GF(2))*R.j*R.k*R.l;
					
					pol := pol + Random(GF(2))*R.j*R.k;
					
				end for;
			end for;
			
			pol := pol + Random(GF(2))*R.j;
			
		end for;
		
	I := I cat [pol];
		
end for;

//Adds the homogeneous parts of q1...qt to I
if AddHomq eq 1 then

	for i in [1..Plus] do
	
		pol := 0;
	
		for el in Monomials(PlusPol[i]) do
		
			if WeightedDegree(el) eq 2 then
			
				pol := pol + el;
			
			end if;
		
		end for;
	
		//Correct guess
		//I := I cat [Evaluate(pol,FixXTuple) + Evaluate(pol,XVec)];
		
		//Random guess
		
		I := I cat [Evaluate(pol,FixXTuple) + Random(GF(2))];
	
	end for;
	

end if;


//Adds v1,...,vk to I (with random guess)
if AddOPlus eq 1 then

	for el in OPlusPol do
	
		I := I cat [Evaluate(el,FixXTuple) + Random(GF(2))];
	
	end for;

end if;





//SetVerbose("Groebner", 2);
//time J := GroebnerBasis(I);

//Truncated Grobner basis
//time J := GroebnerBasis(I,4);
