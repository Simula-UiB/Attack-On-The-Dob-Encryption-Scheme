

//Retrieves a linear polynomial in d variables from a vector of size d
GetPolyFromLinVec := function(V,d);

	pol := 0;

	for i in [1..d] do
	
		if V[i] eq 1 then
		
			pol := pol + R.i;
		
		end if;
	
	end for;
	
	return pol;

end function;


//Takes a matrix of k rows in d columns, k<d, extends this to an invertible d x d matrix. Note that the OPlus-relations are the last columns
ExtendBasis := function(OPlusMat,k,d);

	Mat := ZeroMatrix(K,d,d);
	
	InsertBlock(~Mat,OPlusMat,1, 1);

	OPcount := 1;
	
	count := 1;
	
	RowCount := k + 1;
	
	for i in [1..d] do
	
		if OPcount le k and Mat[OPcount,count] eq 1 then
		
			OPcount := OPcount + 1;
			
			count := count + 1;
		
		else
		
			Mat[RowCount,count] := 1;
			
			count := count + 1;
			
			RowCount := RowCount + 1;
		
		end if;
	
	end for;
	
	if Rank(Mat) ne d then
	
		"something went wrong in the ExtendBasis function!";
		return -1;
		
	else
	
		NewMat := ZeroMatrix(K,d,d);
	
		InsertBlock(~NewMat,Submatrix(Mat,OPlus + 1,1,d - OPlus,d),1, 1);
		InsertBlock(~NewMat,Submatrix(Mat,1,1,OPlus,d),d - OPlus + 1, 1);
	
		return NewMat;
	
	end if;

end function;

//------------------------------------------------------------------------------------------------------------

ChangeOfVariables := function(I,BasisChange,d);

	LinChange := [];

	for i in [1..d] do
	
		Append(~LinChange,GetPolyFromLinVec(BasisChange[i],d));
	
	end for;
	
	NewI := [];
	
	for i in [1..#I] do
	
		NewI := NewI cat [Evaluate(I[i],LinChange)];
	
	end for;
	
	return NewI;

end function;



//----------------------------------------------------------------------------------------------------------------

GetMatrixFromPolSys := function(I,K,P,n,nMax)


	ColSize := Binomial(n,2);
	
	PVec := [];
	
	for i in [1..n] do
	
		PVec := PVec cat [P.i];
	
	end for;
	
	for i in [n + 1..nMax] do
	
		PVec := PVec cat [0];
	
	end for;
	
	Mat := ZeroMatrix(K,#I,ColSize);

	for i in [1..#I] do

		VecToAdd := GetVec2(Evaluate(I[i],PVec),n);
		Mat[i] := VecToAdd;

	end for;


	return Mat;

end function;

//-------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------
//Function takes the inputs a quadratic polynomial system I2, as well as the number of variables. 
//All polynomials are mulitplied by each linear variable x_i, and creates the corresponding homogeneous 
//degree 3 Macaulay matrix. The first #I2 rows x_1 multiplied with the possible polynomials, which will
//be used later to find F' 
DegThreeMacCreatorForFPrime := function(I2,n,KeepVar,OPlus)

	NumCols := Binomial(n,3);
	counter := 1;
	Mac := ZeroMatrix(K,(n-OPlus+1)*#I2,NumCols);	
	
	for el in [1..#I2] do
	
		for i in [1..n] do

			if (i gt n-OPlus) and (i ne KeepVar) then


			else
			
				Mac[counter] := GetVec3(P.i*I2[el],NumCols,n);
				counter := counter + 1;
			
			end if;
			
		end for;
		
	end for;

	return Mac;

end function;



//-----------------------------------------------------------------------------------------------------------------------------------

FindProjectedF := function(XTuple,n,OPlus,KeepVar,K,P,I2,Plus);

	FixXTuple := XTuple;

	for i in [n-OPlus + 1..n] do

		if i ne KeepVar then
		
			FixXTuple[i] := 0;
		
		end if;

	end for;


	for i in [1..#I2] do

		I2[i] := Evaluate(I2[i],FixXTuple);

	end for;

	MatRedOPlus := GetMatrixFromPolSys(I2,K,P,n,n);

	MatRedOPlus,TransformMat := EchelonForm(MatRedOPlus);

	MatRedOPlus := Submatrix(MatRedOPlus,1,1,Rank(MatRedOPlus), NumberOfColumns(MatRedOPlus));


	I2 := [];

	for i in [1..NumberOfRows(MatRedOPlus)] do

		I2 := I2 cat [GetPolyFromVecDeg2(MatRedOPlus[i],n)];

	end for;


	I2ThreeMac := DegThreeMacCreatorForFPrime(I2,n,KeepVar,OPlus);
	
	Bas := Basis(Kernel(I2ThreeMac));
	
	if #Bas ne 2*n then
	
		"Kernel has wrong size in FindProjectedF!";
		
		return -1;
		
	end if;
	
	//Use is how much of the basis elements we need to use to create TempMat. Set to 1 now, increase if the rank is not as expected
	Use := 1;
	TempMat := ZeroMatrix(K,Use*2*n,n + 1 + Plus);

	for l in [0..Use-1] do
		for i in [1..2*n] do

			for j in [0..n + Plus] do
	
				TempMat[2*n*l + i,j+1] := Bas[i][l + 1 + j*(n - OPlus + 1)];
	
			end for;

		end for;

	end for;
	
	if Rank(TempMat) ne n then
	
		"Wrong rank of TempMat in FindProjectedF!";
		
		return -1;
		
	end if;
	
	TempMat := EchelonForm(TempMat);
	
	TempMat := Submatrix(TempMat,1,1,n,n + 1 + Plus);

	return TempMat*MatRedOPlus,Bas,TransformMat;


end function;


//-----------------------------------------------------------------------------------------------------------------------------------
//Change ring of matrix M to be over K (assumes compatibility)
CastMatrix := function(M,K);

	NewM := ZeroMatrix(K,NumberOfRows(M),NumberOfColumns(M));
	
	for i in [1..NumberOfRows(M)] do
	
		for j in [1..NumberOfColumns(M)] do
		
			NewM[i,j] := K ! M[i,j];
		
		end for;
	
	end for;

	return NewM;

end function;


//-----------------------------------------------------------------------------------------------------------------------------------
//Creates a degree 3 Macaulay matrix from I2, multiplies with the first n-NoMult variables.
DegThreeMacCreatorNotAllMult := function(I2,n,NoMult)

	NumCols := Binomial(n,3);
	counter := 1;
	Mac := ZeroMatrix(K,(n-NoMult)*#I2,NumCols);	
	
	for el in [1..#I2] do
	
		for i in [1..n-NoMult] do

			
				Mac[counter] := GetVec3(P.i*I2[el],NumCols,n);
				counter := counter + 1;

			
		end for;
		
	end for;

	return Mac;

end function;



//-----------------------------------------------------------------------------------------------------------------------------------
//Takes a monomial Mon, and finds its index in the ordering Ord
ReturnColInd := function(Ord,Mon);

	ind := -1;

	for i in [1..#Ord] do

		if Ord[i] eq Mon then
	
			ind := i;
		
			break;
	
		end if;

	end for;

	if ind eq -1 then
	
		"Wrong index!";
	
	end if;
	
	return ind;
	
end function;



//-----------------------------------------------------------------------------------------------------------------------------------
//Takes a monomial Mon, and check if it is in the list of monomials, PolMons
GetConst := function(PolMons,Mon);

	Const := 0;

	for i in [1..#PolMons] do

		if PolMons[i] eq Mon then
	
			Const := 1;
		
			break;
	
		end if;

	end for;
	
	return Const;
	
end function;

//-----------------------------------------------------------------------------------------------------------------------------------

//Tests that the basis is indeed linear equivalent to F^h
TestBasis := function(UnModCentralMap,K,P,n,NewIFPrimeMatrix)
	
	if Rank(NewIFPrimeMatrix) ne n then
	
		return "Basis has the wrong size!";
		
	end if;
	
	MatrixFSys := GetMatrixFromPolSys(UnModCentralMap,K,P,n,n);

	Bin := Binomial(n,2);

	CompareMat := ZeroMatrix(K,2*n,Bin);

	InsertBlock(~CompareMat,Submatrix(MatrixFSys,1,1,n,Bin),1,1);

	InsertBlock(~CompareMat,Submatrix(NewIFPrimeMatrix,1,1,n,Bin),n + 1,1);

	if Rank(CompareMat) eq n then
	
		return "The basis for F^h is all good!";
	
	else
	
		return "Something wrong in the basis for F^h!";
	
	end if;

end function;


//-----------------------------------------------------------------------------------------------------------------------------------

//Retrieve a matrix that changes the degree 3 glex monomial order to an order where monomials contains at least two x_i*s are towards the end
GetOrderPermutation := function(n,OPlus,K,P)

FullCount := 1;

FirstCount := 1;

SecCount := Binomial(n-OPlus,3) + Binomial(n-OPlus,2)*OPlus + 1;

ThreeOrd := [];

OrderPermutation := ZeroMatrix(K,Binomial(n,3),Binomial(n,3));

for i in [1..n-2] do

	for j in [i + 1..n-1] do
	
		for l in [j + 1..n] do
		
			ThreeOrd := ThreeOrd cat [P.i*P.j*P.l];
		
			if (j gt n - OPlus) and (l gt n - OPlus) then
			
				OrderPermutation[FullCount,SecCount] := 1;
				
				SecCount := SecCount + 1;
				
			else
			
				OrderPermutation[FullCount,FirstCount] := 1;
				
				FirstCount := FirstCount + 1;
			
			end if;
			
			FullCount := FullCount + 1;
			
		end for;
	
	end for;

end for;

return OrderPermutation;

end function;


//-----------------------------------------------------------------------------------------------------------------------------------

//Takes the unfinished IFPrime, as well as the basis for the "almost kernel elements", and returns the finished IFPrime
FindIFPrime := function(IFPrime,n,OPlus,Bas2,P)

hRing := BooleanPolynomialRing(n*Binomial(OPlus,2));
hMat := ZeroMatrix(hRing,n,Binomial(OPlus,2));

count := 1;

OPlusMons := Binomial(OPlus,2);

for i in [1..OPlusMons] do

	for j in [1..n] do
	
		hMat[j,i] := hRing.count;
		
		count := count + 1;
	
	end for;

end for;

hI := [];


//l3 counts the number of basis elements used. Uses all for the moment, can likely be decreased if need be.
for l3 in [1..2*n] do

pol := 0;
count := 1;

for i in [1..n] do

	for j in [1..n] do
	
		pol := pol + Bas2[l3][count]*P.j*IFPrime[i];
		
		count := count + 1;
		
	end for;
	
end for;


PolMons := Monomials(pol);


count := 1;

for i in [1..OPlus - 1] do

	for j in [i + 1..OPlus] do
	
		for l in [1..n - OPlus] do
		
			pol2 := 0;
		
			for l2 in [0..n-1] do
				
				pol2 := pol2 + hMat[l2 + 1,count]*Bas2[l3][l + l2*(n)];
				
			end for;
			
			hI := hI cat [pol2 - GetConst(PolMons,P.l*P.(n - OPlus + i)*P.(n - OPlus + j))];
		
		end for;
		
		count := count + 1;
	
	end for;

end for; 

end for;

SetVerbose("Groebner", 2);
time hJ := GroebnerBasis(hI);


NewIFPrime := IFPrime;

count := 1;

for i in [1..OPlus-1] do

	for j in [i + 1..OPlus] do

		for l in [1..n] do
	
			if #Coefficients(hJ[count]) eq 2 then
			
				NewIFPrime[l] := NewIFPrime[l] + P.(n - OPlus + i)*P.(n - OPlus + j);

			
			elif #Coefficients(hJ[count]) eq 1 then
			
			
			else
			
				"Not unique solution in hJ!";
			
			end if;


			count := count + 1;
	
		end for;

	end for;
	
end for;


return NewIFPrime;

end function;

//----------------------------------------------------------------------------------------------------------------
//Returns PublicMatrix, the matrix whose rows are the upper homogeneous parts of p1..pd (in glex order)
PublicMatrixWithoutRandCreator := function()


PublicMatrix := ZeroMatrix(K,n,ColSize);

PublicCounter := 1;
for i in [1..n] do

	VecToAdd := GetVec2(P ! I[i],n);
	PublicMatrix[PublicCounter] := VecToAdd;
	PublicCounter := PublicCounter + 1;

end for;


return PublicMatrix;

end function;

//----------------------------------------------------------------------------------------------------------------

//returns a matrix consisting of the homogeneous quadratic part of the possible v_i*v_j*-combinations
GetQuadOPlusStar := function(P,n,OPlus,OPlusMat)

OPlusStarPols := [];

for i in [1..OPlus] do

	OPlusStarPols := OPlusStarPols  cat [GetPolyFromLinVec(OPlusMat[i],n)];

end for;

QuadOPlusStar := ZeroMatrix(K,Binomial(OPlus,2),Binomial(n,2));
count := 1;
for i in [1..OPlus - 1] do

	for j in [i + 1..OPlus] do

		QuadOPlusStar[count] := GetVec2(P ! (OPlusStarPols[i]*OPlusStarPols[j]),n);
	
		count := count + 1;
		
	end for;

end for;

return QuadOPlusStar;

end function;

//----------------------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------------------

//Finds FPrime and maps HL,HVh such that P^h = F' + HL(q_1*,...,q_t*) + HVh(v_1*,...,v_k*)
//qHomEl retrieves the q_i* from qHom
//Note: Inefficiently implemented only for t = 1. 
//For now just tries to find an element in qHom, randomly multiplying with RandP
//Randomised, runs until FPrime has full rank
//Could also be changed such that qHom contains vectors not contained in the span of (v_iv_j*)^h
FindFPrimeAndMaps := function(QuadOPlus,n,K,Plus,NewIFPrimeMatrix,QuadOPlusStar,qHom,Ph,RandP)

//Runs the whole thing 50 times
TopCheck := 0;
for a in [1..50] do

TMat := ZeroMatrix(K,1 + n + QuadOPlus + Plus,Binomial(n,2));

//only implemented for t = 1
if Plus ne 1 then

	return "Only implemented for t = 1!";

end if;

InsertBlock(~TMat,NewIFPrimeMatrix,2, 1);

if OPlus gt 1 then
	
	InsertBlock(~TMat,QuadOPlusStar,n + 2, 1);
	
end if;


//Tests at most 50 times
Check := 0;
for i in [1..50] do
r := Random(1,NumberOfRows(qHom));
r2 := Random(K);
InsertBlock(~TMat,qHom[r] + r2*GetVec2(RandP,n),n + 2 + QuadOPlus, 1);

if #Kernel(TMat) eq 2 then
	
	InsertBlock(~TMat,Ph[1],1, 1);
	
	//Checks if we can make a kernel element with the first P^h vector
	if #Kernel(TMat) eq 2 then
	
		Check2 := 1;
	
		//Checks if we can make a kernel element with the other P^h vectors
		for j in [2..n] do
		
			InsertBlock(~TMat,Ph[j],1, 1);
			
			if #Kernel(TMat) ne 2 then
			
				Check2 := 0;
			
			end if;
		
		end for;
		
		if Check2 eq 1 then
		
			qHomEl := qHom[r] + r2*GetVec2(RandP,n);
			Check := 1;
			break;
			
		else 
		
			InsertBlock(~TMat,ZeroMatrix(K,1,NumberOfColumns(TMat)),1, 1);
		
		end if;
		
	else 
	
		InsertBlock(~TMat,ZeroMatrix(K,1,NumberOfColumns(TMat)),1, 1);
	
	end if;
	
end if;

end for;

if Check eq 0 then

	continue;

end if;


FPrime := ZeroMatrix(K,n,Binomial(n,2));

HL := ZeroMatrix(K,n,Plus);

HVh := ZeroMatrix(K,n,QuadOPlus);


for i in [1..n] do

	InsertBlock(~TMat,Ph[i],1, 1);
	B := Basis(Kernel(TMat));
	
	for j in [1..n] do
	
		FPrime[i] := FPrime[i] + B[1][j + 1]*NewIFPrimeMatrix[j];
	
	end for;
	
	for j in [1..QuadOPlus] do
	
		HVh[i,j] := B[1][j + 1 + n];
	
	end for;
	
	for j in [1..Plus] do
	
		HL[i,j] := B[1][j + 1 + n + QuadOPlus];
	
	end for;
	
end for;

if Rank(FPrime) eq n then

	TopCheck := 1;
	break;

end if;


end for;

if TopCheck eq 1 then

	return FPrime,HL,HVh,qHomEl;

end if;

"Something wrong when finding FPrime and maps";
return -1;

end function;



//----------------------------------------------------------------------------------------------------------------


//Tests the equality P^h = F' + HL(q_1*,...,q_t*) + HVh(v_1*,...,v_k*)
//Only implemented for t = 1
TestEquality := function(FPrime,HL,qHomEl,HVh,QuadOPlusStar,n,Plus,QuadOPlus,Ph)

if Plus ne 1 then

	return "Only implemented for t = 1!";

end if;

for i in [1..n] do

	TV := FPrime[i];

	TV := TV + HL[i,1]*qHomEl;
	for j in [1..QuadOPlus] do

		TV := TV + HVh[i,j]*QuadOPlusStar[j];

	end for;

	if Ph[i] ne TV then
	
		return "Something wrong with F', HL and HV^h!";
	
	end if;
	
end for;

return "All good with F', HL and HV^h!";

end function;

//-------------------------------------------------------------- End Functions ---------------------------------------------------------------------


//-------------------------------------------------------------- Start Program ---------------------------------------------------------------------

VarChange := ExtendBasis(OPlusMat,OPlus,n);



PubMatqHom := ZeroMatrix(K,NumberOfRows(qHom) + m,NumberOfColumns(qHom));

InsertBlock(~PubMatqHom,PubMat,1, 1);

InsertBlock(~PubMatqHom,qHom,m + 1, 1);


I2 := [];

for i in [1..NumberOfRows(PubMatqHom)] do

	I2 := I2 cat [GetPolyFromVecDeg2(PubMatqHom[i],n)];

end for;


I2 := ChangeOfVariables(I2,VarChange^-1,n);


ProjF0,BasF0,TransformMat := FindProjectedF(XTuple,n,OPlus,n,K,P,I2,Plus);

ProjF1 := FindProjectedF(XTuple,n,OPlus,n - 1,K,P,I2,Plus);

ProjF2 := FindProjectedF(XTuple,n,OPlus,n - 2,K,P,I2,Plus);

ProjF3 := FindProjectedF(XTuple,n,OPlus,n - 3,K,P,I2,Plus);



GlueAlongFPrime := [];

for i in [1..n - OPlus] do

	GlueAlongFPrime := GlueAlongFPrime cat [i];

end for;


PermutationFPrime := PermutationCreator(Ord, GlueAlongFPrime);

PermutedOrdFPrime := Ord*PermutationFPrime;


//Change the order of the F1, F2 and F3 matrices such that their overlap is at the first columns.
PermutedProjF0 := ProjF0*(GeneralLinearGroup(ColSize,K) ! PermutationFPrime);

PermutedProjF1 := ProjF1*(GeneralLinearGroup(ColSize,K) ! PermutationFPrime);

PermutedProjF2 := ProjF2*(GeneralLinearGroup(ColSize,K) ! PermutationFPrime);

PermutedProjF3 := ProjF3*(GeneralLinearGroup(ColSize,K) ! PermutationFPrime);


//Glue together to find t vectors of I1 and I2. 
GluedF0AndF1 := GlueTogether(PermutedProjF0,PermutedProjF1,Binomial(#GlueAlongFPrime,2));

GlueF0F1F2 := GlueTogether(GluedF0AndF1,PermutedProjF2,Binomial(#GlueAlongFPrime,2));

UnfinFPrime := GlueTogether(GlueF0F1F2,PermutedProjF3,Binomial(#GlueAlongFPrime,2));



//Permutes the order back to glex order (recall that the transpose of a permutation is its inverse).
UnfinFPrime := UnfinFPrime*(GeneralLinearGroup(ColSize,K) ! Transpose(PermutationFPrime));


//At this point, UnfinFPrime does not contain any information of the monomials x_i*x_j*


//Retrieve a matrix that changes the degree 3 glex monomial order to an order where monomials contains at least two x_i*s are towards the end
OrderPermutation := GetOrderPermutation(n,OPlus,K,P);



IFPrime := [];

for i in [1..n] do

	IFPrime := IFPrime cat [GetPolyFromVecDeg2(UnfinFPrime[i],n)];

end for;


//Create a degree 3 matrix and find the kernel of all but the monomials containing at least two x_i*'s
ThreeIFPrime := DegThreeMacCreatorNotAllMult(IFPrime,n,0);


ThreeIFPrime := ThreeIFPrime*OrderPermutation;


ThreeTempMat := Submatrix(ThreeIFPrime,1,1,NumberOfRows(ThreeIFPrime), Binomial(n-OPlus,3));


Bas2 := Basis(Kernel(ThreeTempMat));


//Returns the completed IFPrime
NewIFPrime := FindIFPrime(IFPrime,n,OPlus,Bas2,P);

//Changing the variables back to the original basis
ChangeVarsNewIFPrime := ChangeOfVariables(NewIFPrime,VarChange,n);

//Matrix form of the new IFPrime
NewIFPrimeMatrix := GetMatrixFromPolSys(ChangeVarsNewIFPrime,K,P,n,n);


//Test the basis for F^h
TestBasis(UnModCentralMap,K,P,n,NewIFPrimeMatrix);


Ph := PublicMatrixWithoutRandCreator();


if OPlus gt 1 then

	QuadOPlusStar := GetQuadOPlusStar(P,n,OPlus,OPlusMat);
	
	QuadOPlus := Binomial(OPlus,2);
	
else 

	QuadOPlusStar := [];
	QuadOPlus := 0;

end if;


//Finds FPrime and maps HL,HVh such that P^h = F' + HL(q_1*,...,q_t*) + HVh(v_1*,...,v_k*)
FPrime,HL,HVh,qHomEl := FindFPrimeAndMaps(QuadOPlus,n,K,Plus,NewIFPrimeMatrix,QuadOPlusStar,qHom,Ph,RandP);


//Test the equality P^h = F' + HL(q_1*,...,q_t*) + HVh(v_1*,...,v_k*)
TestEquality(FPrime,HL,qHomEl,HVh,QuadOPlusStar,n,Plus,QuadOPlus,Ph);

//Test F'
TestBasis(UnModCentralMap,K,P,n,FPrime);


